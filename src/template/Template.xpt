«IMPORT metamodel»

«EXTENSION template::GeneratorExtensions»

«DEFINE main FOR Model»
«EXPAND javaClass FOREACH entities()»
«EXPAND dao FOREACH entities()»
«EXPAND test FOREACH entities()»

«FILE "../drop_tables.sql"»drop sequence hibernate_sequence;
«FOREACH entities() AS f»drop table swag_«f.name.toLowerCase()»;
«ENDFOREACH»
«ENDFILE»

«FILE "../bin/META-INF/persistence.xml"»<?xml version="1.0" encoding="UTF-8"?>
<persistence version="1.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd">
  <persistence-unit name="dao" transaction-type="RESOURCE_LOCAL">
    <provider>org.hibernate.ejb.HibernatePersistence</provider>
        «FOREACH entities() AS f»<class>entities.«f.name»</class>
	«ENDFOREACH»
    <exclude-unlisted-classes>false</exclude-unlisted-classes>
    <properties>
      <property name="hibernate.connection.username" value="swa"/>
      <property name="hibernate.connection.driver_class" value="org.postgresql.Driver"/>
      <property name="hibernate.connection.password" value="swa11"/>
      <property name="hibernate.connection.url" value="jdbc:postgresql://localhost/swa"/>
      <property name="hibernate.cache.provider_class" value="org.hibernate.cache.NoCacheProvider"/>
      <property name="hibernate.hbm2ddl.auto" value="create"/>
    </properties>
  </persistence-unit>
</persistence>
	«ENDFILE»
«ENDDEFINE»

«DEFINE javaClass FOR Entity»
	«FILE "entities/"+name+".java"»
		package entities;
	
		import java.io.Serializable;
		import javax.persistence.*;
		import java.util.List;
	
		@Entity
		@Table(name = "swag_«name.toLowerCase()»")
		public class «name» implements Serializable{
		
			private static final long serialVersionUID = 1L;
		
			public «name»(){}
			
			@Id
    		@GeneratedValue(strategy = GenerationType.AUTO)
			private Long id;
			
			public void setId(Long id){
				this.id = id;
			}
			
			public Long getId(){
				return id;
			}
			
			«FOREACH attributes AS f»
				«FOREACH f.annotations AS a»
			    @«a.annotationType.toString()»(«IF a.mappedBy != null»mappedBy="«a.mappedBy.name»"«ELSEIF a.unique != null»unique=«a.unique.toString()»«ENDIF»)
			    «ENDFOREACH»
			    «IF !f.list»
				private «f.type.name» «f.name»;
				
				public void «f.setter()»(«f.type.name» «f.name») {
					this.«f.name» = «f.name»;
				}
				
				public «f.type.name» «f.getter()»() {
					return «f.name»;
				}
				«ELSE»
				private List<«f.type.name»> «f.name»;
				
				public void «f.setter()»(List<«f.type.name»> «f.name») {
					this.«f.name» = «f.name»;
				}
				
				public List<«f.type.name»> «f.getter()»() {
					return «f.name»;
				}
				«ENDIF»
			«ENDFOREACH»
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE dao FOR Entity»
	«FILE "dao/"+name+"DAO.java"»
		package dao;
	
		import storage.*;
		import entities.«name»;
		import java.util.List;
   		
		public class «name+"DAO"»{
		
			protected DAOImpl dao;
		
			public «name+"DAO"» (){
				dao = DAOImpl.getInstance();
			}
			
    		public boolean create(«name» object) throws DAOException {
        		return dao.create(object);
    		}
   		
    		public «name» get(Long id) throws DAOException {
        		return dao.get(id, «name».class);
    		}

			public «name» update(«name» object) throws DAOException {
        		return dao.update(object);
    		}

    		public boolean delete(Long id) throws DAOException {
        		return dao.delete(id, «name».class);
   			}
   			
   			public List<«name»> getAll() throws DAOException {
   				return dao.getAll(«name».class);
   			}
		}
	«ENDFILE»
«ENDDEFINE»

«DEFINE test FOR Entity»
	«FILE "test/"+name+"Test.java"»
		package test;
	
		import junit.framework.Assert;
		import storage.*;
		import org.junit.Before;
		import org.junit.After;
		import org.junit.Test;
		import java.util.ArrayList;
	
		import entities.*;
		import dao.«name+"DAO"»;
   		
		public class «name+"Test"»{
		
			private «name+"DAO"» dao;
			private «name» entity;

    		@Before
    		public void setUp() throws DAOException {
        		dao = new «name+"DAO"»();
        		entity = new «name»();
    		}
    		
    		@After
    		public void tearDown() {
    			try {
	    			if (entity != null && entity.getId() != null)
	        			dao.delete(entity.getId());
        		} catch (DAOException ex) {
        			;
        		}
    		}

    		@Test
    		public void creatingTest() throws DAOException {
    			entity = new «name»();
    			«FOREACH attributes AS a»
    				«IF a.type.name == "int"»
    					entity.set«a.name.toFirstUpper()»(0);
    				«ELSEIF a.type.name == "String"»
    					entity.set«a.name.toFirstUpper()»("BLA");
    				«ELSEIF a.type.name == "java.util.Date"»
    					entity.set«a.name.toFirstUpper()»(new java.util.Date());
    				«ELSEIF a.type.name == "java.util.TimeZone"»
    					entity.set«a.name.toFirstUpper()»(java.util.TimeZone.getTimeZone("GMT"));
    				«ELSEIF a.type.name == "boolean"»
    					entity.set«a.name.toFirstUpper()»(true);
    				«ELSEIF !a.list»
    					«a.type.name» «a.name» = new «a.type.name»();
    					DAOImpl.getInstance().create(«a.name»);
    					entity.set«a.name.toFirstUpper()»(«a.name»);
    				«ELSE»
    					entity.set«a.name.toFirstUpper()»(new ArrayList<«a.type.name»>());
    				«ENDIF»
    			«ENDFOREACH»
    			Assert.assertTrue(dao.create(entity));
    			Assert.assertNotNull(entity.getId());
    		}
    		
    		@Test
    		public void readingTest() throws DAOException {
    			creatingTest();
    			«name» s = dao.get(entity.getId());
    			Assert.assertNotNull(s);
    			
    			«FOREACH attributes AS a»
    				«IF a.type.name == "int"»
    					Assert.assertEquals(0, s.get«a.name.toFirstUpper()»());
    				«ELSEIF a.type.name == "String"»
    					Assert.assertEquals("BLA", s.get«a.name.toFirstUpper()»());
    				«ELSEIF a.type.name == "boolean"»
    					Assert.assertEquals(true, s.get«a.name.toFirstUpper()»());
    				«ELSEIF !a.list»
    					«a.type.name» «a.name» = s.get«a.name.toFirstUpper()»();
    					Assert.assertNotNull(«a.name»);
    				«ENDIF»
    			«ENDFOREACH»
    		}
    		
    		@Test
    		public void updatingTest() throws DAOException {
    		    «name» s = new «name»();
    			«FOREACH attributes AS a»
    				«IF a.type.name == "int"»
    					s.set«a.name.toFirstUpper()»(0);
    				«ELSEIF a.type.name == "String"»
    					s.set«a.name.toFirstUpper()»("BLA");
    				«ELSEIF a.type.name == "java.util.Date"»
    					s.set«a.name.toFirstUpper()»(new java.util.Date());
    				«ELSEIF a.type.name == "java.util.TimeZone"»
    					s.set«a.name.toFirstUpper()»(java.util.TimeZone.getTimeZone("GMT"));
    				«ELSEIF a.type.name == "boolean"»
    					s.set«a.name.toFirstUpper()»(true);
    				«ELSE»
    					s.set«a.name.toFirstUpper()»(null);
    				«ENDIF»
    			«ENDFOREACH»
    			Assert.assertTrue(dao.create(s));
    			
    			// Create Copy of s
    			«name» sCopy = new «name»();
    			«FOREACH attributes AS a»
    				sCopy.set«a.name.toFirstUpper()»(s.get«a.name.toFirstUpper()»());
    			«ENDFOREACH»
    			
    			// Change Values of s
    			«FOREACH attributes AS a»
    				«IF a.type.name == "int"»
    					s.set«a.name.toFirstUpper()»(1);
    				«ELSEIF a.type.name == "String"»
    					s.set«a.name.toFirstUpper()»("changed");
    				«ELSEIF a.type.name == "java.util.Date"»
    					s.set«a.name.toFirstUpper()»(new java.util.Date());
    				«ELSEIF a.type.name == "java.util.TimeZone"»
    					s.set«a.name.toFirstUpper()»(java.util.TimeZone.getTimeZone("GMT+1"));
    				«ELSEIF a.type.name == "boolean"»
    					s.set«a.name.toFirstUpper()»(false);
    				«ELSE»
    					s.set«a.name.toFirstUpper()»(null);
    				«ENDIF»
    			«ENDFOREACH»
    			s = dao.update(s);
    			// check if Update successful
    			Assert.assertNotNull(s);
    			«FOREACH attributes AS a»
    				«IF a.type.name == "int"»
    					Assert.assertTrue(s.get«a.name.toFirstUpper()»() != sCopy.get«a.name.toFirstUpper()»());
    				«ELSEIF a.type.name == "String"»
    					Assert.assertTrue(s.get«a.name.toFirstUpper()»() != sCopy.get«a.name.toFirstUpper()»());
    				«ELSEIF a.type.name == "java.util.Date"»
    					Assert.assertTrue(s.get«a.name.toFirstUpper()»() != sCopy.get«a.name.toFirstUpper()»());
    				«ELSEIF a.type.name == "java.util.TimeZone"»
    					Assert.assertTrue(s.get«a.name.toFirstUpper()»() != sCopy.get«a.name.toFirstUpper()»());
    				«ELSEIF a.type.name == "boolean"»
    					Assert.assertTrue(s.get«a.name.toFirstUpper()»() != sCopy.get«a.name.toFirstUpper()»());
    				«ELSE»
    					Assert.assertTrue(s.get«a.name.toFirstUpper()»() == sCopy.get«a.name.toFirstUpper()»());
    				«ENDIF»
    			«ENDFOREACH»
    			
    		}
    		
    		@Test
    		public void deletingTest() throws DAOException {
    			Assert.assertTrue(dao.create(entity));
    			Assert.assertTrue(dao.delete(entity.getId()));
    			«name» s = dao.get(entity.getId());
    			Assert.assertNull(s);
    			entity = null;
    		}
		}
	«ENDFILE»
«ENDDEFINE»